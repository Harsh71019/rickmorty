{"version":3,"sources":["components/Episodes.js","components/Pagination.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Episodes","episodes","loading","searchResults","className","map","episode","key","id","name","air_date","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","onClick","href","Search","handleChange","searchTerm","type","placeholder","onChange","value","App","React","useState","setSearchTerm","setEpisodes","setLoading","currentPage","setCurrentPage","useEffect","a","axios","get","res","data","fetchEpisodes","console","log","results","filter","toLowerCase","toString","includes","indexOfLastPost","indexOfFirstPost","currentPosts","slice","e","target","length","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAoBeA,EAlBE,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,QAA6B,EAApBC,cACrC,OAAID,EACK,yCAIP,wBAAIE,UAAU,uBACXH,EAASI,KAAI,SAAAC,GAAO,OACnB,wBAAIC,IAAKD,EAAQE,GAAIJ,UAAU,mBAC5BE,EAAQA,QACT,+BAAKA,EAAQG,KAAb,KACA,+BAAKH,EAAQI,SAAb,WCWKC,EAtBI,SAAC,GAGlB,IAH8D,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACxCC,EAAc,GAEXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKL,EAAaD,GAAeI,IACzDD,EAAYI,KAAKH,GAGnB,OACE,6BACE,wBAAIZ,UAAU,cACXW,EAAYV,KAAI,SAAAe,GAAM,OACrB,wBAAIb,IAAKa,EAAQhB,UAAU,aACzB,uBAAGiB,QAAS,kBAAMP,EAASM,IAASE,KAAK,KAAKlB,UAAU,aACrDgB,UCDAG,EAZA,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WAC9B,OACE,2BACErB,UAAU,wCACVsB,KAAK,SACLC,YAAY,kBACZC,SAAUJ,EACVK,MAAOJ,KCFE,SAASK,IAAO,IAAD,EACQC,IAAMC,SAAS,IADvB,mBACrBP,EADqB,KACTQ,EADS,OAGID,mBAAS,IAHb,mBAGrB/B,EAHqB,KAGXiC,EAHW,OAIEF,oBAAS,GAJX,mBAIrB9B,EAJqB,KAIZiC,EAJY,OAKUH,mBAAS,GALnB,mBAKrBI,EALqB,KAKRC,EALQ,OAMLL,mBAAS,IAAzBpB,EANqB,oBAQ5B0B,qBAAU,YACW,uCAAG,4BAAAC,EAAA,6DACpBJ,GAAW,GADS,SAEFK,IAAMC,IACtB,uIAHkB,OAEdC,EAFc,OAKpBR,EAAYQ,EAAIC,MAChBR,GAAW,GANS,2CAAH,qDASnBS,KACC,IAEHC,QAAQC,IAAI7C,GAMZ8B,IAAMO,WAAU,WACd,IAAMS,EAAU9C,EAAS+C,QAAO,SAAA1C,GAAO,OACrCA,EAAQG,KACLwC,cACAC,WACAC,SAAS1B,EAAWwB,kBAEzBf,EAAYa,KACX,CAACtB,IAEJ,IAAM2B,EAAkBhB,EAAcxB,EAEhCyC,EAAmBD,EAAkBxC,EAErC0C,EAAerD,EAASsD,MAAMF,EAAkBD,GAMtD,OACE,yBAAKhD,UAAU,mBACb,wBAAIA,UAAU,yBAAd,2BAEA,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAQoB,aA7BO,SAAAgC,GACnBvB,EAAcuB,EAAEC,OAAO5B,QA4BiBJ,WAAYA,KAGlD,kBAAC,EAAD,CACExB,SAAUqD,EACVpD,QAASA,IAGX,kBAAC,EAAD,CACEU,aAAcA,EACdC,WAAYZ,EAASyD,OACrB5C,SAlBW,SAAA6C,GAAU,OAAItB,EAAesB,OCxC5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.5d504716.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Episodes = ({ episodes, loading, searchResults }) => {\r\n  if (loading) {\r\n    return <h2> Loading </h2>;\r\n  }\r\n\r\n  return (\r\n    <ul className=\"list-group mb-4 pa3\">\r\n      {episodes.map(episode => (\r\n        <li key={episode.id} className=\"list-group-item\">\r\n          {episode.episode}\r\n          <p> {episode.name} </p>\r\n          <p> {episode.air_date} </p>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Episodes;\r\n","import React from \"react\";\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className=\"page-item\">\r\n            <a onClick={() => paginate(number)} href=\"!#\" className=\"page-link\">\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\n\r\nconst Search = ({ handleChange, searchTerm }) => {\r\n  return (\r\n    <input\r\n      className=\" ba b--green bg-lightest-blue pa3 pb3\"\r\n      type=\"search\"\r\n      placeholder=\"Search Episodes\"\r\n      onChange={handleChange}\r\n      value={searchTerm}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\"\nimport axios from \"axios\";\nimport Episodes from \"./components/Episodes\";\nimport Pagination from \"./components/Pagination\";\nimport Search from \"./components/Search\";\n\nexport default function App() {\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  // const [searchResults, setSearchResults] = React.useState([]);\n  const [episodes, setEpisodes] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n\n  useEffect(() => {\n    const fetchEpisodes = async () => {\n      setLoading(true);\n      const res = await axios.get(\n        \"https://rickandmortyapi.com/api/episode/[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]\"\n      );\n      setEpisodes(res.data);\n      setLoading(false);\n    };\n\n    fetchEpisodes();\n  }, []);\n\n  console.log(episodes);\n\n  const handleChange = e => {\n    setSearchTerm(e.target.value);\n  };\n\n  React.useEffect(() => {\n    const results = episodes.filter(episode =>\n      episode.name\n        .toLowerCase()\n        .toString()\n        .includes(searchTerm.toLowerCase())\n    );\n    setEpisodes(results);\n  }, [searchTerm]);\n\n  const indexOfLastPost = currentPage * postsPerPage;\n\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n\n  const currentPosts = episodes.slice(indexOfFirstPost, indexOfLastPost);\n\n  //change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  return (\n    <div className=\"container mt-5 \">\n      <h1 className=\"text-primary mb-3 tc \">Rick and Morty Episodes</h1>\n\n      <div className=\"tc \">\n        <Search handleChange={handleChange} searchTerm={searchTerm} />\n      </div>\n\n      <Episodes\n        episodes={currentPosts}\n        loading={loading}\n        // searchResults={searchResults}\n      />\n      <Pagination\n        postsPerPage={postsPerPage}\n        totalPosts={episodes.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}